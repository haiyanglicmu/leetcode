# You are given a string s containing lowercase letters and an integer k.
# You need to :
#     First, change some characters of s to other lowercase English letters.
#     Then divide s into k non-empty disjoint substrings such that each substring is palindrome.
#     Return the minimal number of characters that you need to change to divide the string.


class Solution:
    def palindromePartition(self, s: str, k: int) -> int:
        n, K = len(s), k
        cost = [[0] * n] * n
        for l in range(2, n + 1):
            for i, j in zip(range(0, n - l + 1), range(l - 1, n)):
                cost[i][j] = 0 if s[i] == s[j] else 1 + cost[i + 1][j - 1]

        dp = [[float("inf")] * (K + 1)] * n
        for i in range(0, n):
            dp[i][1] = 0
            for k in range(2, K + 1):
                for j in range(0, i):
                    dp[i][k] = min(dp[i][k], dp[j][k - 1] + cost[j + 1][i])
        return dp[n - 1][K]

        #   0 1 2 3
        # 0 0
        # 1 0
        # 2 0


# dp[i, k] = min { dp[j, k - 1], cost(j + 1, i) }
# cost(i, j) = (s[i] != s[j]) + cost(i + 1, j - 1)
# dp[i, 0] = 0
